{"ast":null,"code":"import\"antd/es/badge/style\";import _Badge from\"antd/es/badge\";import React from'react';import{NavLink}from'react-router-dom';import moment from'moment';import{useDispatch,useSelector}from'react-redux';import{BlockSpan}from'../style';import{textRefactor}from'../../../components/utilities/utilities';import{filterSinglePage}from'../../../redux/chat/actionCreator';var PrivateChat=function PrivateChat(_ref){var match=_ref.match;var dispatch=useDispatch();var chatData=useSelector(function(state){return state.chat.data;});var dataFiltering=function dataFiltering(email){dispatch(filterSinglePage(email));};return/*#__PURE__*/React.createElement(\"ul\",null,chatData&&chatData.sort(function(a,b){return b.time-a.time;}).map(function(user,key){var userName=user.userName,content=user.content,email=user.email,img=user.img,active=user.active;var id=content[content.length-1].time;var same=moment(id).format('MM-DD-YYYY')===moment().format('MM-DD-YYYY');return/*#__PURE__*/React.createElement(\"li\",{key:id,className:\"chat-link-signle\"},/*#__PURE__*/React.createElement(NavLink,{onClick:function onClick(){return dataFiltering(email);},to:\"\".concat(match.path,\"/\").concat(email)},/*#__PURE__*/React.createElement(\"div\",{className:\"author-figure\"},/*#__PURE__*/React.createElement(\"img\",{src:require(\"../../../static/img/chat-author/\".concat(img)),alt:\"\"}),/*#__PURE__*/React.createElement(\"span\",{className:active?'active':'inactive'})),/*#__PURE__*/React.createElement(\"div\",{className:\"author-info\"},/*#__PURE__*/React.createElement(BlockSpan,{className:\"author-name\"},userName),/*#__PURE__*/React.createElement(BlockSpan,{className:\"author-chatText\"},textRefactor(content[content.length-1].content,5))),/*#__PURE__*/React.createElement(\"div\",{className:\"author-chatMeta\"},/*#__PURE__*/React.createElement(BlockSpan,null,same?moment(id).format('hh:mm A'):moment(id).format('dddd')),key<=1&&/*#__PURE__*/React.createElement(_Badge,{className:\"badge-success\",count:3}))));}));};export default PrivateChat;","map":{"version":3,"sources":["/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/container/chat/overview/PrivetChat.js"],"names":["React","NavLink","moment","useDispatch","useSelector","BlockSpan","textRefactor","filterSinglePage","PrivateChat","match","dispatch","chatData","state","chat","data","dataFiltering","email","sort","a","b","time","map","user","key","userName","content","img","active","id","length","same","format","path","require"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Badge } from 'antd';\r\nimport { BlockSpan } from '../style';\r\nimport { textRefactor } from '../../../components/utilities/utilities';\r\nimport { filterSinglePage } from '../../../redux/chat/actionCreator';\r\n\r\nconst PrivateChat = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const chatData = useSelector(state => state.chat.data);\r\n\r\n  const dataFiltering = email => {\r\n    dispatch(filterSinglePage(email));\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {chatData &&\r\n        chatData\r\n          .sort((a, b) => {\r\n            return b.time - a.time;\r\n          })\r\n          .map((user, key) => {\r\n            const { userName, content, email, img, active } = user;\r\n            const id = content[content.length - 1].time;\r\n            const same = moment(id).format('MM-DD-YYYY') === moment().format('MM-DD-YYYY');\r\n            return (\r\n              <li key={id} className=\"chat-link-signle\">\r\n                <NavLink onClick={() => dataFiltering(email)} to={`${match.path}/${email}`}>\r\n                  <div className=\"author-figure\">\r\n                    <img src={require(`../../../static/img/chat-author/${img}`)} alt=\"\" />\r\n                    <span className={active ? 'active' : 'inactive'} />\r\n                  </div>\r\n                  <div className=\"author-info\">\r\n                    <BlockSpan className=\"author-name\">{userName}</BlockSpan>\r\n\r\n                    <BlockSpan className=\"author-chatText\">\r\n                      {textRefactor(content[content.length - 1].content, 5)}\r\n                    </BlockSpan>\r\n                  </div>\r\n                  <div className=\"author-chatMeta\">\r\n                    <BlockSpan>{same ? moment(id).format('hh:mm A') : moment(id).format('dddd')}</BlockSpan>\r\n                    {key <= 1 && <Badge className=\"badge-success\" count={3} />}\r\n                  </div>\r\n                </NavLink>\r\n              </li>\r\n            );\r\n          })}\r\n    </ul>\r\n  );\r\n};\r\nPrivateChat.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\nexport default PrivateChat;\r\n"]},"metadata":{},"sourceType":"module"}