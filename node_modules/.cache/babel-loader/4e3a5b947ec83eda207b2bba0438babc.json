{"ast":null,"code":"import\"antd/es/badge/style\";import _Badge from\"antd/es/badge\";import _slicedToArray from\"/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSelector,useDispatch}from'react-redux';import{NavLink}from'react-router-dom';import moment from'moment';import FeatherIcon from'feather-icons-react';import{BlockSpan,ChatWrapper}from'../style';import{textRefactor}from'../../../components/utilities/utilities';import{filterSinglePage}from'../../../redux/chat/actionCreator';import{Button}from'../../../components/buttons/buttons';var AllContacts=function AllContacts(_ref){var match=_ref.match;var dispatch=useDispatch();var chat=useSelector(function(state){return state.chat.data;});var _useState=useState({chatData:chat}),_useState2=_slicedToArray(_useState,1),state=_useState2[0];var chatData=state.chatData;var dataFiltering=function dataFiltering(e){dispatch(filterSinglePage(e.currentTarget.getAttribute('data-email')));};return/*#__PURE__*/React.createElement(ChatWrapper,null,/*#__PURE__*/React.createElement(\"div\",{className:\"create-action\"},/*#__PURE__*/React.createElement(Button,{className:\"btn-add\",size:\"default\",type:\"default\",shape:\"circle\",block:true},/*#__PURE__*/React.createElement(FeatherIcon,{icon:\"user-plus\",size:14}),\"Add New Contact\")),/*#__PURE__*/React.createElement(\"ul\",null,chatData&&chatData.sort(function(a,b){return b.time-a.time;}).map(function(user,key){var userName=user.userName,content=user.content,email=user.email,active=user.active,img=user.img;var id=content[content.length-1].time;var same=moment(id).format('MM-DD-YYYY')===moment().format('MM-DD-YYYY');return/*#__PURE__*/React.createElement(\"li\",{key:id,className:\"chat-link-signle\"},/*#__PURE__*/React.createElement(NavLink,{onClick:dataFiltering,\"data-email\":email,to:\"\".concat(match.path,\"/\").concat(email)},/*#__PURE__*/React.createElement(\"div\",{className:\"author-figure\"},/*#__PURE__*/React.createElement(\"img\",{src:require(\"../../../static/img/chat-author/\".concat(img)),alt:\"\"}),/*#__PURE__*/React.createElement(\"span\",{className:active?'active':'inactive'})),/*#__PURE__*/React.createElement(\"div\",{className:\"author-info\"},/*#__PURE__*/React.createElement(BlockSpan,{className:\"author-name\"},userName),/*#__PURE__*/React.createElement(BlockSpan,{className:\"author-chatText\"},textRefactor(content[content.length-1].content,5))),/*#__PURE__*/React.createElement(\"div\",{className:\"author-chatMeta\"},/*#__PURE__*/React.createElement(BlockSpan,null,same?moment(id).format('hh:mm A'):moment(id).format('dddd')),key<=1&&/*#__PURE__*/React.createElement(_Badge,{className:\"badge-success\",count:3}))));})));};export default AllContacts;","map":{"version":3,"sources":["/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/container/chat/overview/AllContacts.js"],"names":["React","useState","useSelector","useDispatch","NavLink","moment","FeatherIcon","BlockSpan","ChatWrapper","textRefactor","filterSinglePage","Button","AllContacts","match","dispatch","chat","state","data","chatData","dataFiltering","e","currentTarget","getAttribute","sort","a","b","time","map","user","key","userName","content","email","active","img","id","length","same","format","path","require"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport PropTypes from 'prop-types';\r\nimport { Badge } from 'antd';\r\nimport { BlockSpan, ChatWrapper } from '../style';\r\nimport { textRefactor } from '../../../components/utilities/utilities';\r\nimport { filterSinglePage } from '../../../redux/chat/actionCreator';\r\nimport { Button } from '../../../components/buttons/buttons';\r\n\r\nconst AllContacts = ({ match }) => {\r\n  const dispatch = useDispatch();\r\n  const chat = useSelector(state => state.chat.data);\r\n\r\n  const [state] = useState({\r\n    chatData: chat,\r\n  });\r\n\r\n  const { chatData } = state;\r\n\r\n  const dataFiltering = e => {\r\n    dispatch(filterSinglePage(e.currentTarget.getAttribute('data-email')));\r\n  };\r\n\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"create-action\">\r\n        <Button className=\"btn-add\" size=\"default\" type=\"default\" shape=\"circle\" block>\r\n          <FeatherIcon icon=\"user-plus\" size={14} />\r\n          Add New Contact\r\n        </Button>\r\n      </div>\r\n      <ul>\r\n        {chatData &&\r\n          chatData\r\n            .sort((a, b) => {\r\n              return b.time - a.time;\r\n            })\r\n            .map((user, key) => {\r\n              const { userName, content, email, active, img } = user;\r\n              const id = content[content.length - 1].time;\r\n              const same = moment(id).format('MM-DD-YYYY') === moment().format('MM-DD-YYYY');\r\n              return (\r\n                <li key={id} className=\"chat-link-signle\">\r\n                  <NavLink onClick={dataFiltering} data-email={email} to={`${match.path}/${email}`}>\r\n                    <div className=\"author-figure\">\r\n                      <img src={require(`../../../static/img/chat-author/${img}`)} alt=\"\" />\r\n                      <span className={active ? 'active' : 'inactive'} />\r\n                    </div>\r\n                    <div className=\"author-info\">\r\n                      <BlockSpan className=\"author-name\">{userName}</BlockSpan>\r\n\r\n                      <BlockSpan className=\"author-chatText\">\r\n                        {textRefactor(content[content.length - 1].content, 5)}\r\n                      </BlockSpan>\r\n                    </div>\r\n                    <div className=\"author-chatMeta\">\r\n                      <BlockSpan>{same ? moment(id).format('hh:mm A') : moment(id).format('dddd')}</BlockSpan>\r\n                      {key <= 1 && <Badge className=\"badge-success\" count={3} />}\r\n                    </div>\r\n                  </NavLink>\r\n                </li>\r\n              );\r\n            })}\r\n      </ul>\r\n    </ChatWrapper>\r\n  );\r\n};\r\nAllContacts.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\nexport default AllContacts;\r\n"]},"metadata":{},"sourceType":"module"}