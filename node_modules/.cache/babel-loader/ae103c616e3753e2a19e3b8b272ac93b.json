{"ast":null,"code":"var _jsxFileName = \"/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/components/maps/google-maps.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useState } from 'react';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport PropTypes from 'prop-types';\nimport { GmapWraper } from './map-style';\nconst apiKey = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst GoogleMaps = GoogleApiWrapper({\n  apiKey\n})(__signature__(property => {\n  const {\n    latitude,\n    longitude,\n    google,\n    width,\n    height,\n    zoom,\n    mapStyles,\n    place,\n    styles,\n    infoWindow\n  } = property;\n  const [state, setState] = useState({\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  });\n\n  const onMarkerClick = (props, marker) => setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\n  const onMapClicked = () => {\n    if (state.showingInfoWindow) {\n      setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  const onInfoWindowClose = () => {\n    setState({\n      showingInfoWindow: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GmapWraper, {\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    onClick: onMapClicked,\n    styles: mapStyles,\n    google: google,\n    style: styles,\n    center: {\n      lat: latitude,\n      lng: longitude\n    },\n    zoom: zoom,\n    height: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, place !== undefined ? place.map(item => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      key: item.id,\n      onClick: onMarkerClick,\n      position: {\n        lat: item.latitude,\n        lng: item.longitude\n      },\n      icon: require(`../../static/img/map/mpc.png`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(Marker, {\n    onClick: onMarkerClick,\n    position: {\n      lat: latitude,\n      lng: longitude\n    },\n    icon: require(`../../static/img/map/mpc.png`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InfoWindow, {\n    onClose: onInfoWindowClose,\n    marker: state.activeMarker,\n    visible: state.showingInfoWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, infoWindow)));\n}, \"useState{[state, setState]({\\r\\n    showingInfoWindow: false,\\r\\n    activeMarker: {},\\r\\n    selectedPlace: {},\\r\\n  })}\"));\nGoogleMaps.defaultProps = {\n  latitude: 50.797897,\n  longitude: -1.077641,\n  width: '100%',\n  height: '600px',\n  zoom: 13,\n  infoWindow: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Hello world\")),\n  styles: {\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0\n  }\n};\nGoogleMaps.propTypes = {\n  latitude: PropTypes.number,\n  longitude: PropTypes.number,\n  google: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  zoom: PropTypes.number,\n  place: PropTypes.arrayOf(PropTypes.object),\n  infoWindow: PropTypes.node\n};\nexport { GoogleMaps };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(apiKey, \"apiKey\", \"/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/components/maps/google-maps.js\");\n  reactHotLoader.register(GoogleMaps, \"GoogleMaps\", \"/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/components/maps/google-maps.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/shaharnussbaum/Desktop/strikingdash/strikingdash/src/components/maps/google-maps.js"],"names":["React","useState","Map","Marker","GoogleApiWrapper","InfoWindow","PropTypes","GmapWraper","apiKey","process","env","REACT_APP_GOOGLE_MAP_KEY","GoogleMaps","property","latitude","longitude","google","width","height","zoom","mapStyles","place","styles","infoWindow","state","setState","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","onMapClicked","onInfoWindowClose","lat","lng","undefined","map","item","id","require","defaultProps","top","left","propTypes","number","string","arrayOf","object","node"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\r\nimport PropTypes from 'prop-types';\r\nimport { GmapWraper } from './map-style';\r\n\r\nconst apiKey = process.env.REACT_APP_GOOGLE_MAP_KEY;\r\nconst GoogleMaps = GoogleApiWrapper({\r\n  apiKey,\r\n})(property => {\r\n  const { latitude, longitude, google, width, height, zoom, mapStyles, place, styles, infoWindow } = property;\r\n  const [state, setState] = useState({\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n  });\r\n\r\n  const onMarkerClick = (props, marker) =>\r\n    setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true,\r\n    });\r\n\r\n  const onMapClicked = () => {\r\n    if (state.showingInfoWindow) {\r\n      setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onInfoWindowClose = () => {\r\n    setState({\r\n      showingInfoWindow: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <GmapWraper width={width} height={height}>\r\n      <Map\r\n        onClick={onMapClicked}\r\n        styles={mapStyles}\r\n        google={google}\r\n        style={styles}\r\n        center={{ lat: latitude, lng: longitude }}\r\n        zoom={zoom}\r\n        height=\"400px\"\r\n      >\r\n        {place !== undefined ? (\r\n          place.map(item => {\r\n            return (\r\n              <Marker\r\n                key={item.id}\r\n                onClick={onMarkerClick}\r\n                position={{ lat: item.latitude, lng: item.longitude }}\r\n                icon={require(`../../static/img/map/mpc.png`)}\r\n              />\r\n            );\r\n          })\r\n        ) : (\r\n          <Marker\r\n            onClick={onMarkerClick}\r\n            position={{ lat: latitude, lng: longitude }}\r\n            icon={require(`../../static/img/map/mpc.png`)}\r\n          />\r\n        )}\r\n        <InfoWindow onClose={onInfoWindowClose} marker={state.activeMarker} visible={state.showingInfoWindow}>\r\n          {infoWindow}\r\n        </InfoWindow>\r\n      </Map>\r\n    </GmapWraper>\r\n  );\r\n});\r\n\r\nGoogleMaps.defaultProps = {\r\n  latitude: 50.797897,\r\n  longitude: -1.077641,\r\n  width: '100%',\r\n  height: '600px',\r\n  zoom: 13,\r\n  infoWindow: (\r\n    <div>\r\n      <h1>Hello world</h1>\r\n    </div>\r\n  ),\r\n\r\n  styles: {\r\n    width: '100%',\r\n    height: '100%',\r\n    top: 0,\r\n    left: 0,\r\n  },\r\n};\r\n\r\nGoogleMaps.propTypes = {\r\n  latitude: PropTypes.number,\r\n  longitude: PropTypes.number,\r\n  google: PropTypes.string,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n  zoom: PropTypes.number,\r\n  place: PropTypes.arrayOf(PropTypes.object),\r\n  infoWindow: PropTypes.node,\r\n};\r\n\r\nexport { GoogleMaps };\r\n"]},"metadata":{},"sourceType":"module"}